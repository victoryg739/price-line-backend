# -*- coding: utf-8 -*-
"""Copy of sc2006.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LBOOizh7BN_nX-zTmppGtwNnYhJKH544
"""

import pandas as pd
import joblib
import numpy as np

from sklearn.model_selection import train_test_split

"""**Machine Learning**"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import make_column_transformer


df2 = pd.read_csv('resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv')

## Add New Storey Range Column
cat = []
for x in df2['storey_range']:
  x = int(x[0:2])
  if (x>=1 and x <=10):
    cat.append("1st - 10th")
  elif (x>=11 and x<= 20):
    cat.append("11th - 20th")
  elif (x>=21 and x <= 30):
    cat.append("21th - 30th")
  else:
    cat.append("> 30th") 

df2 = df2.assign(storey_range= cat)

## Add New Remaining Lease Range
catA = []
for x in df2['remaining_lease']:
  x = int(x[0:2])
  if (x <50):
    catA.append("< 50 YEARS")
  elif (x >=50 and x <60):
    catA.append("50 - 59 YEARS")
  elif (x >=60 and x <70):
    catA.append("60 - 69 YEARS")
  elif (x >=70 and x <80):
    catA.append("70 - 79 YEARS")
  elif (x >=80 and x <90):
    catA.append("80 - 89 YEARS")
  else:
    catA.append("> 89 YEARS")

df2 = df2.assign(remaining_lease= catA)


cat = [] 
for x in df2['floor_area_sqm']: 
  x = float(x) 
  if (x<40): 
    cat.append("< 40 SQM") 
  elif (40<=x<=49): 
    cat.append("40 - 49 SQM") 
  elif (50<=x<=59): 
    cat.append("50 - 59 SQM") 
  elif (60<=x<=69): 
    cat.append("60 - 69 SQM") 
  elif (70<=x<=79): 
    cat.append("70 - 79 SQM") 
  elif (80<=x<=89): 
    cat.append("80 - 89 SQM") 
  elif (90<=x<=99): 
    cat.append("90 - 99 SQM") 
  elif (100<=x<=109): 
    cat.append("100 - 109 SQM") 
  elif (110<=x<=119): 
    cat.append("110 - 119 SQM") 
  elif (120<=x<=129): 
    cat.append("120 - 129 SQM") 
  elif (130<=x<=139): 
    cat.append("130 - 139 SQM") 
  elif (140<=x<=149): 
    cat.append("140 - 149 SQM") 
  elif (150<=x<=159): 
    cat.append("150 - 159 SQM") 
  elif (160<=x<=169): 
    cat.append("160 - 169 SQM") 
  else:
    cat.append("> 169 SQM") 
 
df2 = df2.assign(floor_area_sqm= cat)
#Ref: https://datagy.io/sklearn-one-hot-encode/

## Flat_Type -- Supposedly possible to include more than one field into the HotEncoder, but it wasn't working for me. So it's being hardcoded here.
transformer = make_column_transformer(
    (OneHotEncoder(), ['flat_type']), #,'storey_range','town','flat_model']),
    remainder='passthrough')
transformed = transformer.fit_transform(df2)

transformed_df = pd.DataFrame(
    transformed, 
    columns=transformer.get_feature_names_out()
)


## storey_range
transformer = make_column_transformer(
    (OneHotEncoder(), ['remainder__storey_range']),
    remainder='passthrough')
transformed = transformer.fit_transform(transformed_df)
transformed_df = pd.DataFrame(
    transformed, 
    columns=transformer.get_feature_names_out()
)

# ##town
transformer = make_column_transformer(
    (OneHotEncoder(), ['remainder__remainder__town']), 
    remainder='passthrough')
transformed = transformer.fit_transform(transformed_df)
transformed_df = pd.DataFrame(
    transformed, 
    columns=transformer.get_feature_names_out()
)
##Flat Model
transformer = make_column_transformer(
    (OneHotEncoder(), ['remainder__remainder__remainder__flat_model']), 
    remainder='passthrough')
transformed = transformer.fit_transform(transformed_df)
transformed_df = pd.DataFrame(
    transformed, 
    columns=transformer.get_feature_names_out()
)



##Remaining Lease
transformer = make_column_transformer(
    (OneHotEncoder(), ['remainder__remainder__remainder__remainder__remaining_lease']), 
    remainder='passthrough')
transformed = transformer.fit_transform(transformed_df)
transformed_df = pd.DataFrame(
    transformed, 
    columns=transformer.get_feature_names_out()
)


##floor_area_sqm
transformer = make_column_transformer(
    (OneHotEncoder(), ['remainder__remainder__remainder__remainder__remainder__floor_area_sqm']), 
    remainder='passthrough')
transformed = transformer.fit_transform(transformed_df)
transformed_df = pd.DataFrame(
    transformed, 
    columns=transformer.get_feature_names_out()
)




##Renaming df Columns
transformedList = list(transformed_df.columns.values)
renamedList = []
renamedList1 = []
for i in transformedList:
  renamedList.append(i.replace("onehotencoder__", ""))
for i in renamedList:
    renamedList1.append(i.replace("remainder__",""))

transformed_df.columns = renamedList1

## removing columns
df3 = transformed_df


#if statement to dynamically remove _id 
if '_id' in (df3.columns.tolist()):
  df3 = df3.drop(['month','block','street_name', 'lease_commence_date', '_id'],axis=1)

else: 
  df3 = df3.drop(['month','block','street_name', 'lease_commence_date'],axis=1)

X = df3[df3.columns.tolist()[:-1]]
Y = df3['resale_price']

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=100)

"""**Using Decision Tree Regression Model**"""
from sklearn.datasets import load_iris

# Load the dataset
iris = load_iris()

from sklearn.tree import DecisionTreeRegressor

treeReg = DecisionTreeRegressor(random_state=0)
treeReg.fit(X_train, y_train)

treeReg.feature_names = None
# Save the model to disk
joblib.dump(treeReg, 'train_model.joblib')

# #Inputs
# floorAreaInput  = 'floor_area_sqm_Any'
# remainingLeaseInput = 'remaining_lease_> 89 YEARS'
# flatModelInput = 'flat_model_Any'
# townInput = 'town_ANG MO KIO'
# storeyRangeInput = 'storey_range_1st - 10th'
# flatTypeInput = 'flat_type_Any'

# # Create List of Inputs (reference)
# listInput = list((floorAreaInput,remainingLeaseInput,flatModelInput,townInput,storeyRangeInput,flatTypeInput))

# #List of Columns (Dynamically created)
# colList = df3.columns.tolist()[:-1]

# #List for inputs, initalized with zeroes
# inputList = [[0]*len(colList)]

# #Input Lists is filled with following function
# for i in range(len(colList)):
#   if (colList[i] in listInput):
#     inputList[0][i] +=1


# #Output Predicted Value
# resale_value = treeReg.predict(inputList)
# print(resale_value)
